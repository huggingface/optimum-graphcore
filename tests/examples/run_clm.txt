33c33
< from datasets import load_dataset, load_metric
---
> from datasets import load_dataset
35a36,38
> from optimum.graphcore import IPUConfig, IPUTrainer
> from optimum.graphcore import IPUTrainingArguments as TrainingArguments
> from optimum.graphcore.data import pad_on_batch_axis
43,44d45
<     Trainer,
<     TrainingArguments,
46d46
<     is_torch_tpu_available,
51c51
< from transformers.utils import check_min_version
---
> from transformers.utils import check_min_version as tf_check_min_version
56c56
< check_min_version("4.18.0")
---
> tf_check_min_version("4.18.0")
117,121c117,121
<     def __post_init__(self):
<         if self.config_overrides is not None and (self.config_name is not None or self.model_name_or_path is not None):
<             raise ValueError(
<                 "--config_overrides can't be used in combination with --config_name or --model_name_or_path"
<             )
---
>     # def __post_init__(self):
>     #     if self.config_overrides is not None and (self.config_name is not None or self.model_name_or_path is not None):
>     #         raise ValueError(
>     #             "--config_overrides can't be used in combination with --config_name or --model_name_or_path"
>     #         )
220,224d219
<     # Log on each process the small summary:
<     logger.warning(
<         f"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}"
<         + f"distributed training: {bool(training_args.local_rank != -1)}, 16-bits training: {training_args.fp16}"
<     )
257,260c252
<             data_args.dataset_name,
<             data_args.dataset_config_name,
<             cache_dir=model_args.cache_dir,
<             use_auth_token=True if model_args.use_auth_token else None,
---
>             data_args.dataset_name, data_args.dataset_config_name, cache_dir=model_args.cache_dir
268d259
<                 use_auth_token=True if model_args.use_auth_token else None,
275d265
<                 use_auth_token=True if model_args.use_auth_token else None,
292,298c282
<         raw_datasets = load_dataset(
<             extension,
<             data_files=data_files,
<             cache_dir=model_args.cache_dir,
<             use_auth_token=True if model_args.use_auth_token else None,
<             **dataset_args,
<         )
---
>         raw_datasets = load_dataset(extension, data_files=data_files, cache_dir=model_args.cache_dir, **dataset_args)
306d289
<                 use_auth_token=True if model_args.use_auth_token else None,
314d296
<                 use_auth_token=True if model_args.use_auth_token else None,
339,342c321,333
<         if model_args.config_overrides is not None:
<             logger.info(f"Overriding config: {model_args.config_overrides}")
<             config.update_from_string(model_args.config_overrides)
<             logger.info(f"New config: {config}")
---
> 
>     if model_args.config_overrides is not None:
>         logger.info(f"Overriding config: {model_args.config_overrides}")
>         config.update_from_string(model_args.config_overrides)
> 
>     if training_args.ipu_config_name:
>         ipu_config = IPUConfig.from_pretrained(training_args.ipu_config_name, **config_kwargs)
>     elif model_args.model_name_or_path:
>         ipu_config = IPUConfig.from_pretrained(model_args.model_name_or_path, **config_kwargs)
>     else:
>         raise RuntimeError(
>             "You must provide an IPUConfig. If the pretrained model does not contain an IPUConfig, you can load an IPUConfig using --ipu_config_name."
>         )
461,462c452
<             max_train_samples = min(len(train_dataset), data_args.max_train_samples)
<             train_dataset = train_dataset.select(range(max_train_samples))
---
>             train_dataset = train_dataset.select(range(data_args.max_train_samples))
469,487c459
<             max_eval_samples = min(len(eval_dataset), data_args.max_eval_samples)
<             eval_dataset = eval_dataset.select(range(max_eval_samples))
< 
<         def preprocess_logits_for_metrics(logits, labels):
<             if isinstance(logits, tuple):
<                 # Depending on the model and config, logits may contain extra tensors,
<                 # like past_key_values, but logits always come first
<                 logits = logits[0]
<             return logits.argmax(dim=-1)
< 
<         metric = load_metric("accuracy")
< 
<         def compute_metrics(eval_preds):
<             preds, labels = eval_preds
<             # preds have the same shape as the labels, after the argmax(-1) has been calculated
<             # by preprocess_logits_for_metrics but we need to shift the labels
<             labels = labels[:, 1:].reshape(-1)
<             preds = preds[:, :-1].reshape(-1)
<             return metric.compute(predictions=preds, references=labels)
---
>             eval_dataset = eval_dataset.select(range(data_args.max_eval_samples))
490c462
<     trainer = Trainer(
---
>     trainer = IPUTrainer(
491a464
>         ipu_config=ipu_config,
496d468
<         # Data collator will default to DataCollatorWithPadding, so we change it.
498,501d469
<         compute_metrics=compute_metrics if training_args.do_eval and not is_torch_tpu_available() else None,
<         preprocess_logits_for_metrics=preprocess_logits_for_metrics
<         if training_args.do_eval and not is_torch_tpu_available()
<         else None,
