35d34
< import evaluate
36a36,38
> from optimum.graphcore import IPUConfig, IPUTrainer
> from optimum.graphcore import IPUTrainingArguments as TrainingArguments
> from optimum.graphcore.data import pad_on_batch_axis
44,45d45
<     Trainer,
<     TrainingArguments,
47d46
<     is_torch_tpu_available,
52c51,52
< from transformers.utils import check_min_version, send_example_telemetry
---
> from transformers.utils import check_min_version as tf_check_min_version
> from transformers.utils import send_example_telemetry
57c57
< check_min_version("4.25.0")
---
> tf_check_min_version("4.25.0")
123,128d122
<     def __post_init__(self):
<         if self.config_overrides is not None and (self.config_name is not None or self.model_name_or_path is not None):
<             raise ValueError(
<                 "--config_overrides can't be used in combination with --config_name or --model_name_or_path"
<             )
< 
236,240d229
<     # Log on each process the small summary:
<     logger.warning(
<         f"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}"
<         + f"distributed training: {bool(training_args.local_rank != -1)}, 16-bits training: {training_args.fp16}"
<     )
355,358c344,357
<         if model_args.config_overrides is not None:
<             logger.info(f"Overriding config: {model_args.config_overrides}")
<             config.update_from_string(model_args.config_overrides)
<             logger.info(f"New config: {config}")
---
> 
>     if model_args.config_overrides is not None:
>         logger.info(f"Overriding config: {model_args.config_overrides}")
>         config.update_from_string(model_args.config_overrides)
>         logger.info(f"New config: {config}")
> 
>     if training_args.ipu_config_name:
>         ipu_config = IPUConfig.from_pretrained(training_args.ipu_config_name, **config_kwargs)
>     elif model_args.model_name_or_path:
>         ipu_config = IPUConfig.from_pretrained(model_args.model_name_or_path, **config_kwargs)
>     else:
>         raise RuntimeError(
>             "You must provide an IPUConfig. If the pretrained model does not contain an IPUConfig, you can load an IPUConfig using --ipu_config_name."
>         )
493,509d491
<         def preprocess_logits_for_metrics(logits, labels):
<             if isinstance(logits, tuple):
<                 # Depending on the model and config, logits may contain extra tensors,
<                 # like past_key_values, but logits always come first
<                 logits = logits[0]
<             return logits.argmax(dim=-1)
< 
<         metric = evaluate.load("accuracy")
< 
<         def compute_metrics(eval_preds):
<             preds, labels = eval_preds
<             # preds have the same shape as the labels, after the argmax(-1) has been calculated
<             # by preprocess_logits_for_metrics but we need to shift the labels
<             labels = labels[:, 1:].reshape(-1)
<             preds = preds[:, :-1].reshape(-1)
<             return metric.compute(predictions=preds, references=labels)
< 
511c493
<     trainer = Trainer(
---
>     trainer = IPUTrainer(
512a495
>         ipu_config=ipu_config,
517d499
<         # Data collator will default to DataCollatorWithPadding, so we change it.
519,522d500
<         compute_metrics=compute_metrics if training_args.do_eval and not is_torch_tpu_available() else None,
<         preprocess_logits_for_metrics=preprocess_logits_for_metrics
<         if training_args.do_eval and not is_torch_tpu_available()
<         else None,
