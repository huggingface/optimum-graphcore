35a36,38
> from optimum.graphcore import IPUConfig, IPUTrainer
> from optimum.graphcore import IPUTrainingArguments as TrainingArguments
> from optimum.graphcore.data import DataCollatorForLanguageModelingWithMaxTokensMasked, pad_on_batch_axis
44,46d46
<     Trainer,
<     TrainingArguments,
<     is_torch_tpu_available,
228,232d227
<     # Log on each process the small summary:
<     logger.warning(
<         f"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}"
<         + f"distributed training: {bool(training_args.local_rank != -1)}, 16-bits training: {training_args.fp16}"
<     )
344a340,346
>     if training_args.ipu_config_name:
>         ipu_config = IPUConfig.from_pretrained(training_args.ipu_config_name, **config_kwargs)
>     elif model_args.model_name_or_path:
>         ipu_config = IPUConfig.from_pretrained(model_args.model_name_or_path, **config_kwargs)
>     else:
>         raise RuntimeError("You must provide an IPUConfig")
> 
516,517c518
<     pad_to_multiple_of_8 = data_args.line_by_line and training_args.fp16 and not data_args.pad_to_max_length
<     data_collator = DataCollatorForLanguageModeling(
---
>     data_collator = DataCollatorForLanguageModelingWithMaxTokensMasked(
520c521
<         pad_to_multiple_of=8 if pad_to_multiple_of_8 else None,
---
>         pad_to_multiple_of=None,
522a524,529
>     if training_args.do_eval and not training_args.prediction_loss_only:
>         logging.warning(
>             "Because pipelined models return only the loss sometimes (due to performance reasons), evaluation might not"
>             " work as expected, set --prediction_loss_only to fix that."
>         )
> 
524c531
<     trainer = Trainer(
---
>     trainer = IPUTrainer(
525a533
>         ipu_config=ipu_config,
531,534c539,540
<         compute_metrics=compute_metrics if training_args.do_eval and not is_torch_tpu_available() else None,
<         preprocess_logits_for_metrics=preprocess_logits_for_metrics
<         if training_args.do_eval and not is_torch_tpu_available()
<         else None,
---
>         compute_metrics=compute_metrics if training_args.do_eval else None,
>         preprocess_logits_for_metrics=preprocess_logits_for_metrics if training_args.do_eval else None,
