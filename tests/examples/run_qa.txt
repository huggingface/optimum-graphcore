30a31,34
> from optimum.graphcore import IPUConfig
> from optimum.graphcore import IPUTrainingArguments as TrainingArguments
> from optimum.graphcore.data import pad_on_batch_axis
> from optimum.graphcore.utils import check_min_version
40d43
<     TrainingArguments,
45c48
< from transformers.utils import check_min_version
---
> from transformers.utils import check_min_version as tf_check_min_version
51c54,57
< check_min_version("4.19.0.dev0")
---
> tf_check_min_version("4.19.0.dev0")
> 
> # Will error if the minimal version of Optimum Graphcore is not installed. Remove at your own risks.
> check_min_version("0.2.4.dev")
228,232d233
<     # Log on each process the small summary:
<     logger.warning(
<         f"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}"
<         + f"distributed training: {bool(training_args.local_rank != -1)}, 16-bits training: {training_args.fp16}"
<     )
302a304,310
>     ipu_config = IPUConfig.from_pretrained(
>         training_args.ipu_config_name if training_args.ipu_config_name else model_args.model_name_or_path,
>         cache_dir=model_args.cache_dir,
>         revision=model_args.model_revision,
>         use_auth_token=True if model_args.use_auth_token else None,
>     )
> 
550a559,571
>     if training_args.do_train and training_args.pad_on_batch_axis:
>         logger.info(
>             "Padding on batch axis enabled, each batch feeded to the compiled model during training will have the proper size"
>         )
>         data_collator_wrapper = pad_on_batch_axis(
>             training_args.per_device_train_batch_size * ipu_config.batch_size_factor(),
>             {
>                 k: data_args.max_seq_length if k in ["start_positions", "end_positions"] else 0
>                 for k in train_dataset.column_names
>             },
>         )
>         data_collator = data_collator_wrapper(data_collator)
> 
584a606
>         ipu_config=ipu_config,
